üß† CURSOR AGENT - GOLD STANDARD PROMPT FOR E2E TEST GENERATION USING PLAYWRIGHT MCP AND CYPRESS

You are a senior automation engineer using the Playwright MCP Server to control a real browser and interact with a mock e-commerce application. Follow these instructions step-by-step. Do not skip or assume anything. Use bullet points and complete each task fully before moving on.

---

üîó TARGET WEBSITE

- [ ] Navigate to the following page using the Playwright MCP Server:
  https://v0-imagine-deals.vercel.app/login

---

‚úÖ TEST CASE 1: SUCCESSFUL PAYMENT FLOW

- [ ] Login using the following credentials:
  - Username: test_user
  - Password: test_pass
- [ ] Complete a full purchase flow using a mock credit card.
- [ ] Ensure the payment is accepted and the order completes successfully.

‚ùå TEST CASE 2: FAILED PAYMENT FLOW

- [ ] Login using the following credentials:
  - Username: test_failure
  - Password: test_pass
- [ ] Follow the same flow as above, but simulate a failed payment (e.g. card declined).
- [ ] Confirm the proper error handling is shown for a failed transaction.

---

üé• ACTION RECORDING

- [ ] Use the MCP Server to record all selectors and user interactions for both test cases.
- [ ] Generate a Cypress test file based on the recorded flow and save it as:
  /temp/cypress-test.cy.ts

---

üõ†Ô∏è CYPRESS FRAMEWORK SETUP (WITH TYPESCRIPT)

- [ ] Initialize a new Cypress project using TypeScript.

- [ ] Refactor the recorded test to use the Page Object Model (POM) pattern:
  - [ ] Create one page object per page (Login, Products, Cart, Checkout).
  - [ ] Store these files inside a `pages/` folder.

- [ ] Use fixtures to store test data:
  - [ ] Store this data in the `fixtures/` folder.

- [ ] Secure credentials and sensitive information:
  - [ ] Store credentials using environment variables (e.g. `CYPRESS_USERNAME`, `CYPRESS_PASSWORD`).
  - [ ] Do not hardcode passwords or usernames in test files.

- [ ] Add a `.gitignore` file to exclude unnecessary files:
  ```
  node_modules/
  .env
  cypress/videos/
  cypress/screenshots/
  ```

- [ ] Create a `README.md` file with the following sections:
  - [ ] Project overview and purpose
  - [ ] Setup instructions
  - [ ] How to run tests (`npx cypress run --headless`)
  - [ ] Folder structure overview
  - [ ] Required environment variables and where to define them

---

üìÅ EXPECTED PROJECT STRUCTURE

- [ ] Create the following folder layout(if you need extra folders, add them):
```
cypress/
  ‚îú‚îÄ‚îÄ fixtures/
  ‚îú‚îÄ‚îÄ pages/
  ‚îú‚îÄ‚îÄ support/
  ‚îî‚îÄ‚îÄ e2e/
```

---

üß™ FINAL STEP: HEADLESS EXECUTION

- [ ] Run both test cases using Cypress in headless mode to verify success:
```
npx cypress run --headless
```

Repeat: Do not assume or skip any step. Follow the checklist and complete all outputs as described.