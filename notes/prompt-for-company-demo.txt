🧠 CURSOR / CLAUDE AGENT - STRICT PROMPT FOR E2E TEST GENERATION USING PLAYWRIGHT MCP AND CYPRESS

You are a senior automation agent using the Playwright MCP Server to control a real browser and interact with a mock e-commerce application. Follow these instructions EXACTLY and SEQUENTIALLY. This process is composed of **two strict phases**, and you are NOT ALLOWED to proceed to Phase 2 until all conditions from Phase 1 are confirmed as completed.

---

📍 PHASE 1 – RECORD E2E TEST FLOWS USING MCP SERVER

🔗 TARGET WEBSITE

- [ ] Connect to the MCP Server.
- [ ] Navigate to: https://v0-imagine-deals.vercel.app/login

📝 PARALLEL RECORDING REQUIREMENT

- [ ] As you interact with the browser using the MCP Server, you must record **every action and selector in real time**.
- [ ] Do NOT wait until the end to generate code.
- [ ] Immediately translate each interaction into Cypress-compatible code and **append it to**:
  - `/temp/cypress-test.cy.ts`

✅ TEST CASE 1: SUCCESSFUL ORDER FLOW

- [ ] Login using:
  - Username: test_user
  - Password: test_pass
- [ ] Complete a purchase with a mock credit card.
- [ ] Record and store all actions and assertions.

❌ TEST CASE 2: FAILED ORDER FLOW

- [ ] Login using:
  - Username: test_failure
  - Password: test_pass
- [ ] Attempt to complete the same flow, but simulate a declined payment.
- [ ] Record and store the corresponding actions and error handling.

🚫 DO NOT PROCEED TO PHASE 2 UNTIL THE FOLLOWING CONDITIONS ARE TRUE:
- [ ] `/temp/cypress-test.cy.ts` exists.
- [ ] It includes full interaction code for both test cases.
- [ ] Cypress code includes selectors, inputs, assertions, and flows.

If these conditions are not satisfied, STOP. Prompt the user for confirmation or retry.

---

📍 PHASE 2 – CYPRESS FRAMEWORK BOOTSTRAP (WITH TYPESCRIPT)

- [ ] Initialize a Cypress project using TypeScript.

- [ ] Refactor the recorded test using the Page Object Model (POM):
  - [ ] One page object per page (Login, Products, Cart, Checkout).
  - [ ] Store these in the `pages/` folder.

- [ ] Store test data in the `fixtures/` folder.

- [ ] Store credentials using environment variables:
  - `CYPRESS_USERNAME`, `CYPRESS_PASSWORD`
  - NEVER hardcode credentials.

- [ ] Add a `.gitignore` with the following:
  ```
  node_modules/
  .env
  cypress/videos/
  cypress/screenshots/
  ```

- [ ] Create a `README.md` with:
  - Project overview
  - Setup steps
  - How to run: `npx cypress run --headless`
  - Folder structure
  - Env variable configuration

📁 Project Structure:
```
cypress/
  ├── fixtures/
  ├── pages/
  ├── support/
  └── e2e/
```

🧪 Run all tests in headless mode:
```
npx cypress run --headless
```

Only begin this phase if PHASE 1 completed successfully. Follow instructions exactly and confirm each output.