1. Use the Playwright MCP Server to save all the code generation for further uses.
2. All browser automation must be routed through the MCP Server. Do not simulate interactions or bypass the MCP in any part of the flow. 
3. Use the Playwright MCP Server to navigate to https://www.saucedemo.com. 
3. On the login page, execute and validate the following two scenarios, find the credentials in the web page:
   3.1 - Scenario 1: Valid Login (then logout to avoid cache issues)
   3.2 - Scenario 2: Locked Out User
4. Close the Playwright MCP Server once everything is executed and stop the code generation.
6. Allow the MCP Server to complete the code generation.
7. Use the code found in the temp_codegen folder as a reference for the next steps.
8. Transpile the test code to a Cypress framework using TypeScript following the next required configurations(next steps)
9. Organize the Cypress project without running "cypress open" generate the standard structure of the framework
10. create the tests(each one should be independent, no dependencies between them),  Use the Page Object Model pattern to manage attributes and behaviors.
11. Store reusable data in the fixtures folder like test data or expected results. 
12. If credentials, put them in the cypress.env.json
13. In the root directory  Create a .gitignore file that excludes node_modules and cypress.env.json.
14. Create a cy task to get detail logs for the actions, and assertions in the terminal, implement it in the framework, just call the cy task to print console logs.
15. Integrate the Cypress Plugin "cypress-mochawesome-reporter" and its latest version, make all the required configurations. Using the latest version there is only 1 dependency required.
16. Install dependencies and Run the framework in headless mode by CLI using cypress run. Check that Cypress and all the tests runs without issues. Failures are accepted, framework configuration issues are not.
17. Confirm there are no extra dependencies added that are not needed.
18. In the root directory Add a README.md file that documents how to run the tests and describes the project structure.
19. Check Cypress linting issues and fix them all.
20. In the root directory  Set up a GitHub Actions workflow to install dependencies and run the Cypress tests,  The branch name is not main as usualy, it is master.
21. Then, commit, and push the latest changes using the GitHub MCP Server root directory to the remote repository. The repo already exists, and I need to version the changes.
22. Using the GitHub MCP Server configure the repository to publish a github page based on on the /cypress/reports/html/index.html file. I need to have the latest report view

In the chat post: "Run the 22 steps sequentially until all the process is completed, make sure to analyze each detail of the prompt to accomplish everything."